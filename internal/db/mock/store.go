// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aalug/go-gin-job-search/internal/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/aalug/job-finder-go/internal/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateCompany mocks base method.
func (m *MockStore) CreateCompany(arg0 context.Context, arg1 db.CreateCompanyParams) (db.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompany", arg0, arg1)
	ret0, _ := ret[0].(db.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockStoreMockRecorder) CreateCompany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockStore)(nil).CreateCompany), arg0, arg1)
}

// CreateEmployer mocks base method.
func (m *MockStore) CreateEmployer(arg0 context.Context, arg1 db.CreateEmployerParams) (db.Employer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployer", arg0, arg1)
	ret0, _ := ret[0].(db.Employer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmployer indicates an expected call of CreateEmployer.
func (mr *MockStoreMockRecorder) CreateEmployer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployer", reflect.TypeOf((*MockStore)(nil).CreateEmployer), arg0, arg1)
}

// CreateEmployerTx mocks base method.
func (m *MockStore) CreateEmployerTx(arg0 context.Context, arg1 db.CreateEmployerTxParams) (db.CreateEmployerTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployerTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateEmployerTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmployerTx indicates an expected call of CreateEmployerTx.
func (mr *MockStoreMockRecorder) CreateEmployerTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployerTx", reflect.TypeOf((*MockStore)(nil).CreateEmployerTx), arg0, arg1)
}

// CreateJob mocks base method.
func (m *MockStore) CreateJob(arg0 context.Context, arg1 db.CreateJobParams) (db.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", arg0, arg1)
	ret0, _ := ret[0].(db.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockStoreMockRecorder) CreateJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockStore)(nil).CreateJob), arg0, arg1)
}

// CreateJobApplication mocks base method.
func (m *MockStore) CreateJobApplication(arg0 context.Context, arg1 db.CreateJobApplicationParams) (db.JobApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJobApplication", arg0, arg1)
	ret0, _ := ret[0].(db.JobApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJobApplication indicates an expected call of CreateJobApplication.
func (mr *MockStoreMockRecorder) CreateJobApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobApplication", reflect.TypeOf((*MockStore)(nil).CreateJobApplication), arg0, arg1)
}

// CreateJobApplicationTx mocks base method.
func (m *MockStore) CreateJobApplicationTx(arg0 context.Context, arg1 db.CreateJobApplicationTxParams) (db.CreateJobApplicationTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJobApplicationTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateJobApplicationTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJobApplicationTx indicates an expected call of CreateJobApplicationTx.
func (mr *MockStoreMockRecorder) CreateJobApplicationTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobApplicationTx", reflect.TypeOf((*MockStore)(nil).CreateJobApplicationTx), arg0, arg1)
}

// CreateJobSkill mocks base method.
func (m *MockStore) CreateJobSkill(arg0 context.Context, arg1 db.CreateJobSkillParams) (db.JobSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJobSkill", arg0, arg1)
	ret0, _ := ret[0].(db.JobSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJobSkill indicates an expected call of CreateJobSkill.
func (mr *MockStoreMockRecorder) CreateJobSkill(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobSkill", reflect.TypeOf((*MockStore)(nil).CreateJobSkill), arg0, arg1)
}

// CreateMultipleJobSkills mocks base method.
func (m *MockStore) CreateMultipleJobSkills(arg0 context.Context, arg1 []string, arg2 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMultipleJobSkills", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMultipleJobSkills indicates an expected call of CreateMultipleJobSkills.
func (mr *MockStoreMockRecorder) CreateMultipleJobSkills(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultipleJobSkills", reflect.TypeOf((*MockStore)(nil).CreateMultipleJobSkills), arg0, arg1, arg2)
}

// CreateMultipleUserSkills mocks base method.
func (m *MockStore) CreateMultipleUserSkills(arg0 context.Context, arg1 []db.CreateMultipleUserSkillsParams, arg2 int32) ([]db.UserSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMultipleUserSkills", arg0, arg1, arg2)
	ret0, _ := ret[0].([]db.UserSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMultipleUserSkills indicates an expected call of CreateMultipleUserSkills.
func (mr *MockStoreMockRecorder) CreateMultipleUserSkills(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultipleUserSkills", reflect.TypeOf((*MockStore)(nil).CreateMultipleUserSkills), arg0, arg1, arg2)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateUserSkill mocks base method.
func (m *MockStore) CreateUserSkill(arg0 context.Context, arg1 db.CreateUserSkillParams) (db.UserSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserSkill", arg0, arg1)
	ret0, _ := ret[0].(db.UserSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserSkill indicates an expected call of CreateUserSkill.
func (mr *MockStoreMockRecorder) CreateUserSkill(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserSkill", reflect.TypeOf((*MockStore)(nil).CreateUserSkill), arg0, arg1)
}

// CreateUserTx mocks base method.
func (m *MockStore) CreateUserTx(arg0 context.Context, arg1 db.CreateUserTxParams) (db.CreateUserTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateUserTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTx indicates an expected call of CreateUserTx.
func (mr *MockStoreMockRecorder) CreateUserTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTx", reflect.TypeOf((*MockStore)(nil).CreateUserTx), arg0, arg1)
}

// CreateVerifyEmail mocks base method.
func (m *MockStore) CreateVerifyEmail(arg0 context.Context, arg1 db.CreateVerifyEmailParams) (db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVerifyEmail indicates an expected call of CreateVerifyEmail.
func (mr *MockStoreMockRecorder) CreateVerifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVerifyEmail", reflect.TypeOf((*MockStore)(nil).CreateVerifyEmail), arg0, arg1)
}

// DeleteAllUserSkills mocks base method.
func (m *MockStore) DeleteAllUserSkills(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllUserSkills", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllUserSkills indicates an expected call of DeleteAllUserSkills.
func (mr *MockStoreMockRecorder) DeleteAllUserSkills(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllUserSkills", reflect.TypeOf((*MockStore)(nil).DeleteAllUserSkills), arg0, arg1)
}

// DeleteCompany mocks base method.
func (m *MockStore) DeleteCompany(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCompany", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCompany indicates an expected call of DeleteCompany.
func (mr *MockStoreMockRecorder) DeleteCompany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCompany", reflect.TypeOf((*MockStore)(nil).DeleteCompany), arg0, arg1)
}

// DeleteEmployer mocks base method.
func (m *MockStore) DeleteEmployer(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmployer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEmployer indicates an expected call of DeleteEmployer.
func (mr *MockStoreMockRecorder) DeleteEmployer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmployer", reflect.TypeOf((*MockStore)(nil).DeleteEmployer), arg0, arg1)
}

// DeleteJob mocks base method.
func (m *MockStore) DeleteJob(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJob", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJob indicates an expected call of DeleteJob.
func (mr *MockStoreMockRecorder) DeleteJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockStore)(nil).DeleteJob), arg0, arg1)
}

// DeleteJobApplication mocks base method.
func (m *MockStore) DeleteJobApplication(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobApplication", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJobApplication indicates an expected call of DeleteJobApplication.
func (mr *MockStoreMockRecorder) DeleteJobApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobApplication", reflect.TypeOf((*MockStore)(nil).DeleteJobApplication), arg0, arg1)
}

// DeleteJobPosting mocks base method.
func (m *MockStore) DeleteJobPosting(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobPosting", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJobPosting indicates an expected call of DeleteJobPosting.
func (mr *MockStoreMockRecorder) DeleteJobPosting(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobPosting", reflect.TypeOf((*MockStore)(nil).DeleteJobPosting), arg0, arg1)
}

// DeleteJobSkill mocks base method.
func (m *MockStore) DeleteJobSkill(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobSkill", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJobSkill indicates an expected call of DeleteJobSkill.
func (mr *MockStoreMockRecorder) DeleteJobSkill(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobSkill", reflect.TypeOf((*MockStore)(nil).DeleteJobSkill), arg0, arg1)
}

// DeleteJobSkillsByJobID mocks base method.
func (m *MockStore) DeleteJobSkillsByJobID(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobSkillsByJobID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJobSkillsByJobID indicates an expected call of DeleteJobSkillsByJobID.
func (mr *MockStoreMockRecorder) DeleteJobSkillsByJobID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobSkillsByJobID", reflect.TypeOf((*MockStore)(nil).DeleteJobSkillsByJobID), arg0, arg1)
}

// DeleteMultipleJobSkills mocks base method.
func (m *MockStore) DeleteMultipleJobSkills(arg0 context.Context, arg1 []int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMultipleJobSkills", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMultipleJobSkills indicates an expected call of DeleteMultipleJobSkills.
func (mr *MockStoreMockRecorder) DeleteMultipleJobSkills(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMultipleJobSkills", reflect.TypeOf((*MockStore)(nil).DeleteMultipleJobSkills), arg0, arg1)
}

// DeleteMultipleUserSkills mocks base method.
func (m *MockStore) DeleteMultipleUserSkills(arg0 context.Context, arg1 []int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMultipleUserSkills", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMultipleUserSkills indicates an expected call of DeleteMultipleUserSkills.
func (mr *MockStoreMockRecorder) DeleteMultipleUserSkills(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMultipleUserSkills", reflect.TypeOf((*MockStore)(nil).DeleteMultipleUserSkills), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// DeleteUserSkill mocks base method.
func (m *MockStore) DeleteUserSkill(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserSkill", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserSkill indicates an expected call of DeleteUserSkill.
func (mr *MockStoreMockRecorder) DeleteUserSkill(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserSkill", reflect.TypeOf((*MockStore)(nil).DeleteUserSkill), arg0, arg1)
}

// DeleteVerifyEmail mocks base method.
func (m *MockStore) DeleteVerifyEmail(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVerifyEmail indicates an expected call of DeleteVerifyEmail.
func (mr *MockStoreMockRecorder) DeleteVerifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVerifyEmail", reflect.TypeOf((*MockStore)(nil).DeleteVerifyEmail), arg0, arg1)
}

// ExecTx mocks base method.
func (m *MockStore) ExecTx(arg0 context.Context, arg1 func(*db.Queries) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecTx indicates an expected call of ExecTx.
func (mr *MockStoreMockRecorder) ExecTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecTx", reflect.TypeOf((*MockStore)(nil).ExecTx), arg0, arg1)
}

// GetCompanyByID mocks base method.
func (m *MockStore) GetCompanyByID(arg0 context.Context, arg1 int32) (db.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyByID", arg0, arg1)
	ret0, _ := ret[0].(db.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyByID indicates an expected call of GetCompanyByID.
func (mr *MockStoreMockRecorder) GetCompanyByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyByID", reflect.TypeOf((*MockStore)(nil).GetCompanyByID), arg0, arg1)
}

// GetCompanyByName mocks base method.
func (m *MockStore) GetCompanyByName(arg0 context.Context, arg1 string) (db.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyByName", arg0, arg1)
	ret0, _ := ret[0].(db.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyByName indicates an expected call of GetCompanyByName.
func (mr *MockStoreMockRecorder) GetCompanyByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyByName", reflect.TypeOf((*MockStore)(nil).GetCompanyByName), arg0, arg1)
}

// GetCompanyIDOfJob mocks base method.
func (m *MockStore) GetCompanyIDOfJob(arg0 context.Context, arg1 int32) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyIDOfJob", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyIDOfJob indicates an expected call of GetCompanyIDOfJob.
func (mr *MockStoreMockRecorder) GetCompanyIDOfJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyIDOfJob", reflect.TypeOf((*MockStore)(nil).GetCompanyIDOfJob), arg0, arg1)
}

// GetCompanyNameByID mocks base method.
func (m *MockStore) GetCompanyNameByID(arg0 context.Context, arg1 int32) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyNameByID", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyNameByID indicates an expected call of GetCompanyNameByID.
func (mr *MockStoreMockRecorder) GetCompanyNameByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyNameByID", reflect.TypeOf((*MockStore)(nil).GetCompanyNameByID), arg0, arg1)
}

// GetEmployerAndCompanyDetails mocks base method.
func (m *MockStore) GetEmployerAndCompanyDetails(arg0 context.Context, arg1 string) (db.GetEmployerAndCompanyDetailsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployerAndCompanyDetails", arg0, arg1)
	ret0, _ := ret[0].(db.GetEmployerAndCompanyDetailsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployerAndCompanyDetails indicates an expected call of GetEmployerAndCompanyDetails.
func (mr *MockStoreMockRecorder) GetEmployerAndCompanyDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployerAndCompanyDetails", reflect.TypeOf((*MockStore)(nil).GetEmployerAndCompanyDetails), arg0, arg1)
}

// GetEmployerByEmail mocks base method.
func (m *MockStore) GetEmployerByEmail(arg0 context.Context, arg1 string) (db.Employer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployerByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.Employer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployerByEmail indicates an expected call of GetEmployerByEmail.
func (mr *MockStoreMockRecorder) GetEmployerByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployerByEmail", reflect.TypeOf((*MockStore)(nil).GetEmployerByEmail), arg0, arg1)
}

// GetEmployerByID mocks base method.
func (m *MockStore) GetEmployerByID(arg0 context.Context, arg1 int32) (db.Employer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployerByID", arg0, arg1)
	ret0, _ := ret[0].(db.Employer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployerByID indicates an expected call of GetEmployerByID.
func (mr *MockStoreMockRecorder) GetEmployerByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployerByID", reflect.TypeOf((*MockStore)(nil).GetEmployerByID), arg0, arg1)
}

// GetJob mocks base method.
func (m *MockStore) GetJob(arg0 context.Context, arg1 int32) (db.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", arg0, arg1)
	ret0, _ := ret[0].(db.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob.
func (mr *MockStoreMockRecorder) GetJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockStore)(nil).GetJob), arg0, arg1)
}

// GetJobApplicationForEmployer mocks base method.
func (m *MockStore) GetJobApplicationForEmployer(arg0 context.Context, arg1 int32) (db.GetJobApplicationForEmployerRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobApplicationForEmployer", arg0, arg1)
	ret0, _ := ret[0].(db.GetJobApplicationForEmployerRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobApplicationForEmployer indicates an expected call of GetJobApplicationForEmployer.
func (mr *MockStoreMockRecorder) GetJobApplicationForEmployer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobApplicationForEmployer", reflect.TypeOf((*MockStore)(nil).GetJobApplicationForEmployer), arg0, arg1)
}

// GetJobApplicationForUser mocks base method.
func (m *MockStore) GetJobApplicationForUser(arg0 context.Context, arg1 int32) (db.GetJobApplicationForUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobApplicationForUser", arg0, arg1)
	ret0, _ := ret[0].(db.GetJobApplicationForUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobApplicationForUser indicates an expected call of GetJobApplicationForUser.
func (mr *MockStoreMockRecorder) GetJobApplicationForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobApplicationForUser", reflect.TypeOf((*MockStore)(nil).GetJobApplicationForUser), arg0, arg1)
}

// GetJobApplicationUserID mocks base method.
func (m *MockStore) GetJobApplicationUserID(arg0 context.Context, arg1 int32) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobApplicationUserID", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobApplicationUserID indicates an expected call of GetJobApplicationUserID.
func (mr *MockStoreMockRecorder) GetJobApplicationUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobApplicationUserID", reflect.TypeOf((*MockStore)(nil).GetJobApplicationUserID), arg0, arg1)
}

// GetJobApplicationUserIDAndStatus mocks base method.
func (m *MockStore) GetJobApplicationUserIDAndStatus(arg0 context.Context, arg1 int32) (db.GetJobApplicationUserIDAndStatusRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobApplicationUserIDAndStatus", arg0, arg1)
	ret0, _ := ret[0].(db.GetJobApplicationUserIDAndStatusRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobApplicationUserIDAndStatus indicates an expected call of GetJobApplicationUserIDAndStatus.
func (mr *MockStoreMockRecorder) GetJobApplicationUserIDAndStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobApplicationUserIDAndStatus", reflect.TypeOf((*MockStore)(nil).GetJobApplicationUserIDAndStatus), arg0, arg1)
}

// GetJobBasicInfo mocks base method.
func (m *MockStore) GetJobBasicInfo(arg0 context.Context, arg1 int32) (db.GetJobBasicInfoRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobBasicInfo", arg0, arg1)
	ret0, _ := ret[0].(db.GetJobBasicInfoRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobBasicInfo indicates an expected call of GetJobBasicInfo.
func (mr *MockStoreMockRecorder) GetJobBasicInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobBasicInfo", reflect.TypeOf((*MockStore)(nil).GetJobBasicInfo), arg0, arg1)
}

// GetJobDetails mocks base method.
func (m *MockStore) GetJobDetails(arg0 context.Context, arg1 int32) (db.GetJobDetailsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobDetails", arg0, arg1)
	ret0, _ := ret[0].(db.GetJobDetailsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobDetails indicates an expected call of GetJobDetails.
func (mr *MockStoreMockRecorder) GetJobDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobDetails", reflect.TypeOf((*MockStore)(nil).GetJobDetails), arg0, arg1)
}

// GetJobIDOfJobApplication mocks base method.
func (m *MockStore) GetJobIDOfJobApplication(arg0 context.Context, arg1 int32) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobIDOfJobApplication", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobIDOfJobApplication indicates an expected call of GetJobIDOfJobApplication.
func (mr *MockStoreMockRecorder) GetJobIDOfJobApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobIDOfJobApplication", reflect.TypeOf((*MockStore)(nil).GetJobIDOfJobApplication), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserByID mocks base method.
func (m *MockStore) GetUserByID(arg0 context.Context, arg1 int32) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockStoreMockRecorder) GetUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockStore)(nil).GetUserByID), arg0, arg1)
}

// GetUserDetailsByEmail mocks base method.
func (m *MockStore) GetUserDetailsByEmail(arg0 context.Context, arg1 string) (db.User, []db.UserSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDetailsByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].([]db.UserSkill)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserDetailsByEmail indicates an expected call of GetUserDetailsByEmail.
func (mr *MockStoreMockRecorder) GetUserDetailsByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDetailsByEmail", reflect.TypeOf((*MockStore)(nil).GetUserDetailsByEmail), arg0, arg1)
}

// ListAllJobSkillsByJobID mocks base method.
func (m *MockStore) ListAllJobSkillsByJobID(arg0 context.Context, arg1 int32) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllJobSkillsByJobID", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllJobSkillsByJobID indicates an expected call of ListAllJobSkillsByJobID.
func (mr *MockStoreMockRecorder) ListAllJobSkillsByJobID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllJobSkillsByJobID", reflect.TypeOf((*MockStore)(nil).ListAllJobSkillsByJobID), arg0, arg1)
}

// ListAllJobsForES mocks base method.
func (m *MockStore) ListAllJobsForES(arg0 context.Context) ([]db.ListAllJobsForESRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllJobsForES", arg0)
	ret0, _ := ret[0].([]db.ListAllJobsForESRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllJobsForES indicates an expected call of ListAllJobsForES.
func (mr *MockStoreMockRecorder) ListAllJobsForES(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllJobsForES", reflect.TypeOf((*MockStore)(nil).ListAllJobsForES), arg0)
}

// ListJobApplicationsForEmployer mocks base method.
func (m *MockStore) ListJobApplicationsForEmployer(arg0 context.Context, arg1 db.ListJobApplicationsForEmployerParams) ([]db.ListJobApplicationsForEmployerRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobApplicationsForEmployer", arg0, arg1)
	ret0, _ := ret[0].([]db.ListJobApplicationsForEmployerRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobApplicationsForEmployer indicates an expected call of ListJobApplicationsForEmployer.
func (mr *MockStoreMockRecorder) ListJobApplicationsForEmployer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobApplicationsForEmployer", reflect.TypeOf((*MockStore)(nil).ListJobApplicationsForEmployer), arg0, arg1)
}

// ListJobApplicationsForUser mocks base method.
func (m *MockStore) ListJobApplicationsForUser(arg0 context.Context, arg1 db.ListJobApplicationsForUserParams) ([]db.ListJobApplicationsForUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobApplicationsForUser", arg0, arg1)
	ret0, _ := ret[0].([]db.ListJobApplicationsForUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobApplicationsForUser indicates an expected call of ListJobApplicationsForUser.
func (mr *MockStoreMockRecorder) ListJobApplicationsForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobApplicationsForUser", reflect.TypeOf((*MockStore)(nil).ListJobApplicationsForUser), arg0, arg1)
}

// ListJobSkillsByJobID mocks base method.
func (m *MockStore) ListJobSkillsByJobID(arg0 context.Context, arg1 db.ListJobSkillsByJobIDParams) ([]db.ListJobSkillsByJobIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobSkillsByJobID", arg0, arg1)
	ret0, _ := ret[0].([]db.ListJobSkillsByJobIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobSkillsByJobID indicates an expected call of ListJobSkillsByJobID.
func (mr *MockStoreMockRecorder) ListJobSkillsByJobID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobSkillsByJobID", reflect.TypeOf((*MockStore)(nil).ListJobSkillsByJobID), arg0, arg1)
}

// ListJobsByCompanyExactName mocks base method.
func (m *MockStore) ListJobsByCompanyExactName(arg0 context.Context, arg1 db.ListJobsByCompanyExactNameParams) ([]db.ListJobsByCompanyExactNameRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsByCompanyExactName", arg0, arg1)
	ret0, _ := ret[0].([]db.ListJobsByCompanyExactNameRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobsByCompanyExactName indicates an expected call of ListJobsByCompanyExactName.
func (mr *MockStoreMockRecorder) ListJobsByCompanyExactName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsByCompanyExactName", reflect.TypeOf((*MockStore)(nil).ListJobsByCompanyExactName), arg0, arg1)
}

// ListJobsByCompanyID mocks base method.
func (m *MockStore) ListJobsByCompanyID(arg0 context.Context, arg1 db.ListJobsByCompanyIDParams) ([]db.ListJobsByCompanyIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsByCompanyID", arg0, arg1)
	ret0, _ := ret[0].([]db.ListJobsByCompanyIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobsByCompanyID indicates an expected call of ListJobsByCompanyID.
func (mr *MockStoreMockRecorder) ListJobsByCompanyID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsByCompanyID", reflect.TypeOf((*MockStore)(nil).ListJobsByCompanyID), arg0, arg1)
}

// ListJobsByCompanyName mocks base method.
func (m *MockStore) ListJobsByCompanyName(arg0 context.Context, arg1 db.ListJobsByCompanyNameParams) ([]db.ListJobsByCompanyNameRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsByCompanyName", arg0, arg1)
	ret0, _ := ret[0].([]db.ListJobsByCompanyNameRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobsByCompanyName indicates an expected call of ListJobsByCompanyName.
func (mr *MockStoreMockRecorder) ListJobsByCompanyName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsByCompanyName", reflect.TypeOf((*MockStore)(nil).ListJobsByCompanyName), arg0, arg1)
}

// ListJobsByFilters mocks base method.
func (m *MockStore) ListJobsByFilters(arg0 context.Context, arg1 db.ListJobsByFiltersParams) ([]db.ListJobsByFiltersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsByFilters", arg0, arg1)
	ret0, _ := ret[0].([]db.ListJobsByFiltersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobsByFilters indicates an expected call of ListJobsByFilters.
func (mr *MockStoreMockRecorder) ListJobsByFilters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsByFilters", reflect.TypeOf((*MockStore)(nil).ListJobsByFilters), arg0, arg1)
}

// ListJobsByIndustry mocks base method.
func (m *MockStore) ListJobsByIndustry(arg0 context.Context, arg1 db.ListJobsByIndustryParams) ([]db.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsByIndustry", arg0, arg1)
	ret0, _ := ret[0].([]db.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobsByIndustry indicates an expected call of ListJobsByIndustry.
func (mr *MockStoreMockRecorder) ListJobsByIndustry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsByIndustry", reflect.TypeOf((*MockStore)(nil).ListJobsByIndustry), arg0, arg1)
}

// ListJobsByLocation mocks base method.
func (m *MockStore) ListJobsByLocation(arg0 context.Context, arg1 db.ListJobsByLocationParams) ([]db.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsByLocation", arg0, arg1)
	ret0, _ := ret[0].([]db.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobsByLocation indicates an expected call of ListJobsByLocation.
func (mr *MockStoreMockRecorder) ListJobsByLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsByLocation", reflect.TypeOf((*MockStore)(nil).ListJobsByLocation), arg0, arg1)
}

// ListJobsBySalaryRange mocks base method.
func (m *MockStore) ListJobsBySalaryRange(arg0 context.Context, arg1 db.ListJobsBySalaryRangeParams) ([]db.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsBySalaryRange", arg0, arg1)
	ret0, _ := ret[0].([]db.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobsBySalaryRange indicates an expected call of ListJobsBySalaryRange.
func (mr *MockStoreMockRecorder) ListJobsBySalaryRange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsBySalaryRange", reflect.TypeOf((*MockStore)(nil).ListJobsBySalaryRange), arg0, arg1)
}

// ListJobsBySkill mocks base method.
func (m *MockStore) ListJobsBySkill(arg0 context.Context, arg1 db.ListJobsBySkillParams) ([]int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsBySkill", arg0, arg1)
	ret0, _ := ret[0].([]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobsBySkill indicates an expected call of ListJobsBySkill.
func (mr *MockStoreMockRecorder) ListJobsBySkill(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsBySkill", reflect.TypeOf((*MockStore)(nil).ListJobsBySkill), arg0, arg1)
}

// ListJobsByTitle mocks base method.
func (m *MockStore) ListJobsByTitle(arg0 context.Context, arg1 db.ListJobsByTitleParams) ([]db.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsByTitle", arg0, arg1)
	ret0, _ := ret[0].([]db.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobsByTitle indicates an expected call of ListJobsByTitle.
func (mr *MockStoreMockRecorder) ListJobsByTitle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsByTitle", reflect.TypeOf((*MockStore)(nil).ListJobsByTitle), arg0, arg1)
}

// ListJobsForEmployer mocks base method.
func (m *MockStore) ListJobsForEmployer(arg0 context.Context, arg1 db.ListJobsForEmployerParams) ([]db.ListJobsForEmployerRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsForEmployer", arg0, arg1)
	ret0, _ := ret[0].([]db.ListJobsForEmployerRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobsForEmployer indicates an expected call of ListJobsForEmployer.
func (mr *MockStoreMockRecorder) ListJobsForEmployer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsForEmployer", reflect.TypeOf((*MockStore)(nil).ListJobsForEmployer), arg0, arg1)
}

// ListJobsMatchingUserSkills mocks base method.
func (m *MockStore) ListJobsMatchingUserSkills(arg0 context.Context, arg1 db.ListJobsMatchingUserSkillsParams) ([]db.ListJobsMatchingUserSkillsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsMatchingUserSkills", arg0, arg1)
	ret0, _ := ret[0].([]db.ListJobsMatchingUserSkillsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobsMatchingUserSkills indicates an expected call of ListJobsMatchingUserSkills.
func (mr *MockStoreMockRecorder) ListJobsMatchingUserSkills(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsMatchingUserSkills", reflect.TypeOf((*MockStore)(nil).ListJobsMatchingUserSkills), arg0, arg1)
}

// ListUserSkills mocks base method.
func (m *MockStore) ListUserSkills(arg0 context.Context, arg1 db.ListUserSkillsParams) ([]db.UserSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserSkills", arg0, arg1)
	ret0, _ := ret[0].([]db.UserSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserSkills indicates an expected call of ListUserSkills.
func (mr *MockStoreMockRecorder) ListUserSkills(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserSkills", reflect.TypeOf((*MockStore)(nil).ListUserSkills), arg0, arg1)
}

// ListUsersBySkill mocks base method.
func (m *MockStore) ListUsersBySkill(arg0 context.Context, arg1 db.ListUsersBySkillParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersBySkill", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersBySkill indicates an expected call of ListUsersBySkill.
func (mr *MockStoreMockRecorder) ListUsersBySkill(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersBySkill", reflect.TypeOf((*MockStore)(nil).ListUsersBySkill), arg0, arg1)
}

// LoadTestData mocks base method.
func (m *MockStore) LoadTestData(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LoadTestData", arg0)
}

// LoadTestData indicates an expected call of LoadTestData.
func (mr *MockStoreMockRecorder) LoadTestData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadTestData", reflect.TypeOf((*MockStore)(nil).LoadTestData), arg0)
}

// UpdateCompany mocks base method.
func (m *MockStore) UpdateCompany(arg0 context.Context, arg1 db.UpdateCompanyParams) (db.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCompany", arg0, arg1)
	ret0, _ := ret[0].(db.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCompany indicates an expected call of UpdateCompany.
func (mr *MockStoreMockRecorder) UpdateCompany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompany", reflect.TypeOf((*MockStore)(nil).UpdateCompany), arg0, arg1)
}

// UpdateEmployer mocks base method.
func (m *MockStore) UpdateEmployer(arg0 context.Context, arg1 db.UpdateEmployerParams) (db.Employer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployer", arg0, arg1)
	ret0, _ := ret[0].(db.Employer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmployer indicates an expected call of UpdateEmployer.
func (mr *MockStoreMockRecorder) UpdateEmployer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployer", reflect.TypeOf((*MockStore)(nil).UpdateEmployer), arg0, arg1)
}

// UpdateEmployerPassword mocks base method.
func (m *MockStore) UpdateEmployerPassword(arg0 context.Context, arg1 db.UpdateEmployerPasswordParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployerPassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmployerPassword indicates an expected call of UpdateEmployerPassword.
func (mr *MockStoreMockRecorder) UpdateEmployerPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployerPassword", reflect.TypeOf((*MockStore)(nil).UpdateEmployerPassword), arg0, arg1)
}

// UpdateJob mocks base method.
func (m *MockStore) UpdateJob(arg0 context.Context, arg1 db.UpdateJobParams) (db.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJob", arg0, arg1)
	ret0, _ := ret[0].(db.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJob indicates an expected call of UpdateJob.
func (mr *MockStoreMockRecorder) UpdateJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJob", reflect.TypeOf((*MockStore)(nil).UpdateJob), arg0, arg1)
}

// UpdateJobApplication mocks base method.
func (m *MockStore) UpdateJobApplication(arg0 context.Context, arg1 db.UpdateJobApplicationParams) (db.JobApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobApplication", arg0, arg1)
	ret0, _ := ret[0].(db.JobApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobApplication indicates an expected call of UpdateJobApplication.
func (mr *MockStoreMockRecorder) UpdateJobApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobApplication", reflect.TypeOf((*MockStore)(nil).UpdateJobApplication), arg0, arg1)
}

// UpdateJobApplicationStatus mocks base method.
func (m *MockStore) UpdateJobApplicationStatus(arg0 context.Context, arg1 db.UpdateJobApplicationStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobApplicationStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJobApplicationStatus indicates an expected call of UpdateJobApplicationStatus.
func (mr *MockStoreMockRecorder) UpdateJobApplicationStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobApplicationStatus", reflect.TypeOf((*MockStore)(nil).UpdateJobApplicationStatus), arg0, arg1)
}

// UpdateJobSkill mocks base method.
func (m *MockStore) UpdateJobSkill(arg0 context.Context, arg1 db.UpdateJobSkillParams) (db.JobSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobSkill", arg0, arg1)
	ret0, _ := ret[0].(db.JobSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobSkill indicates an expected call of UpdateJobSkill.
func (mr *MockStoreMockRecorder) UpdateJobSkill(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobSkill", reflect.TypeOf((*MockStore)(nil).UpdateJobSkill), arg0, arg1)
}

// UpdatePassword mocks base method.
func (m *MockStore) UpdatePassword(arg0 context.Context, arg1 db.UpdatePasswordParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockStoreMockRecorder) UpdatePassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockStore)(nil).UpdatePassword), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}

// UpdateUserSkill mocks base method.
func (m *MockStore) UpdateUserSkill(arg0 context.Context, arg1 db.UpdateUserSkillParams) (db.UserSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserSkill", arg0, arg1)
	ret0, _ := ret[0].(db.UserSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserSkill indicates an expected call of UpdateUserSkill.
func (mr *MockStoreMockRecorder) UpdateUserSkill(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSkill", reflect.TypeOf((*MockStore)(nil).UpdateUserSkill), arg0, arg1)
}

// UpdateVerifyEmail mocks base method.
func (m *MockStore) UpdateVerifyEmail(arg0 context.Context, arg1 db.UpdateVerifyEmailParams) (db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVerifyEmail indicates an expected call of UpdateVerifyEmail.
func (mr *MockStoreMockRecorder) UpdateVerifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVerifyEmail", reflect.TypeOf((*MockStore)(nil).UpdateVerifyEmail), arg0, arg1)
}

// VerifyEmployerEmail mocks base method.
func (m *MockStore) VerifyEmployerEmail(arg0 context.Context, arg1 string) (db.Employer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmployerEmail", arg0, arg1)
	ret0, _ := ret[0].(db.Employer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmployerEmail indicates an expected call of VerifyEmployerEmail.
func (mr *MockStoreMockRecorder) VerifyEmployerEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmployerEmail", reflect.TypeOf((*MockStore)(nil).VerifyEmployerEmail), arg0, arg1)
}

// VerifyEmployerEmailTx mocks base method.
func (m *MockStore) VerifyEmployerEmailTx(arg0 context.Context, arg1 db.VerifyEmailTxParams) (db.VerifyEmployerEmailResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmployerEmailTx", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmployerEmailResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmployerEmailTx indicates an expected call of VerifyEmployerEmailTx.
func (mr *MockStoreMockRecorder) VerifyEmployerEmailTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmployerEmailTx", reflect.TypeOf((*MockStore)(nil).VerifyEmployerEmailTx), arg0, arg1)
}

// VerifyUserEmail mocks base method.
func (m *MockStore) VerifyUserEmail(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUserEmail", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyUserEmail indicates an expected call of VerifyUserEmail.
func (mr *MockStoreMockRecorder) VerifyUserEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUserEmail", reflect.TypeOf((*MockStore)(nil).VerifyUserEmail), arg0, arg1)
}

// VerifyUserEmailTx mocks base method.
func (m *MockStore) VerifyUserEmailTx(arg0 context.Context, arg1 db.VerifyEmailTxParams) (db.VerifyUserEmailResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUserEmailTx", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyUserEmailResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyUserEmailTx indicates an expected call of VerifyUserEmailTx.
func (mr *MockStoreMockRecorder) VerifyUserEmailTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUserEmailTx", reflect.TypeOf((*MockStore)(nil).VerifyUserEmailTx), arg0, arg1)
}
