// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: job_skill.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const createJobSkill = `-- name: CreateJobSkill :one
INSERT INTO job_skills (job_id, skill)
VALUES ($1, $2)
RETURNING id, job_id, skill
`

type CreateJobSkillParams struct {
	JobID int32  `json:"job_id"`
	Skill string `json:"skill"`
}

func (q *Queries) CreateJobSkill(ctx context.Context, arg CreateJobSkillParams) (JobSkill, error) {
	row := q.db.QueryRowContext(ctx, createJobSkill, arg.JobID, arg.Skill)
	var i JobSkill
	err := row.Scan(&i.ID, &i.JobID, &i.Skill)
	return i, err
}

const deleteJobSkill = `-- name: DeleteJobSkill :exec
DELETE
FROM job_skills
WHERE id = $1
`

func (q *Queries) DeleteJobSkill(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteJobSkill, id)
	return err
}

const deleteJobSkillsByJobID = `-- name: DeleteJobSkillsByJobID :exec
DELETE
FROM job_skills
WHERE job_id = $1
`

func (q *Queries) DeleteJobSkillsByJobID(ctx context.Context, jobID int32) error {
	_, err := q.db.ExecContext(ctx, deleteJobSkillsByJobID, jobID)
	return err
}

const deleteMultipleJobSkills = `-- name: DeleteMultipleJobSkills :exec
DELETE
FROM job_skills
WHERE id = ANY ($1::int[])
`

func (q *Queries) DeleteMultipleJobSkills(ctx context.Context, ids []int32) error {
	_, err := q.db.ExecContext(ctx, deleteMultipleJobSkills, pq.Array(ids))
	return err
}

const listAllJobSkillsByJobID = `-- name: ListAllJobSkillsByJobID :many
SELECT skill
FROM job_skills
WHERE job_id = $1
`

func (q *Queries) ListAllJobSkillsByJobID(ctx context.Context, jobID int32) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listAllJobSkillsByJobID, jobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var skill string
		if err := rows.Scan(&skill); err != nil {
			return nil, err
		}
		items = append(items, skill)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listJobSkillsByJobID = `-- name: ListJobSkillsByJobID :many
SELECT id, skill
FROM job_skills
WHERE job_id = $1
LIMIT $2 OFFSET $3
`

type ListJobSkillsByJobIDParams struct {
	JobID  int32 `json:"job_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListJobSkillsByJobIDRow struct {
	ID    int32  `json:"id"`
	Skill string `json:"skill"`
}

func (q *Queries) ListJobSkillsByJobID(ctx context.Context, arg ListJobSkillsByJobIDParams) ([]ListJobSkillsByJobIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listJobSkillsByJobID, arg.JobID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListJobSkillsByJobIDRow{}
	for rows.Next() {
		var i ListJobSkillsByJobIDRow
		if err := rows.Scan(&i.ID, &i.Skill); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listJobsBySkill = `-- name: ListJobsBySkill :many
SELECT job_id
FROM job_skills
WHERE skill = $1
LIMIT $2 OFFSET $3
`

type ListJobsBySkillParams struct {
	Skill  string `json:"skill"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListJobsBySkill(ctx context.Context, arg ListJobsBySkillParams) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, listJobsBySkill, arg.Skill, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int32{}
	for rows.Next() {
		var job_id int32
		if err := rows.Scan(&job_id); err != nil {
			return nil, err
		}
		items = append(items, job_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJobSkill = `-- name: UpdateJobSkill :one
UPDATE job_skills
SET skill = $2
WHERE id = $1
RETURNING id, job_id, skill
`

type UpdateJobSkillParams struct {
	ID    int32  `json:"id"`
	Skill string `json:"skill"`
}

func (q *Queries) UpdateJobSkill(ctx context.Context, arg UpdateJobSkillParams) (JobSkill, error) {
	row := q.db.QueryRowContext(ctx, updateJobSkill, arg.ID, arg.Skill)
	var i JobSkill
	err := row.Scan(&i.ID, &i.JobID, &i.Skill)
	return i, err
}
