// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: company.sql

package db

import (
	"context"
)

const createCompany = `-- name: CreateCompany :one
INSERT INTO companies (name, industry, location)
VALUES ($1, $2, $3)
RETURNING id, name, industry, location
`

type CreateCompanyParams struct {
	Name     string `json:"name"`
	Industry string `json:"industry"`
	Location string `json:"location"`
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (Company, error) {
	row := q.db.QueryRowContext(ctx, createCompany, arg.Name, arg.Industry, arg.Location)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Industry,
		&i.Location,
	)
	return i, err
}

const deleteCompany = `-- name: DeleteCompany :exec
DELETE
FROM companies
WHERE id = $1
`

func (q *Queries) DeleteCompany(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCompany, id)
	return err
}

const getCompanyByID = `-- name: GetCompanyByID :one
SELECT id, name, industry, location
FROM companies
WHERE id = $1
`

func (q *Queries) GetCompanyByID(ctx context.Context, id int32) (Company, error) {
	row := q.db.QueryRowContext(ctx, getCompanyByID, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Industry,
		&i.Location,
	)
	return i, err
}

const getCompanyByName = `-- name: GetCompanyByName :one
SELECT id, name, industry, location
FROM companies
WHERE name = $1
`

func (q *Queries) GetCompanyByName(ctx context.Context, name string) (Company, error) {
	row := q.db.QueryRowContext(ctx, getCompanyByName, name)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Industry,
		&i.Location,
	)
	return i, err
}

const getCompanyNameByID = `-- name: GetCompanyNameByID :one
SELECT name
FROM companies
WHERE id = $1
`

func (q *Queries) GetCompanyNameByID(ctx context.Context, id int32) (string, error) {
	row := q.db.QueryRowContext(ctx, getCompanyNameByID, id)
	var name string
	err := row.Scan(&name)
	return name, err
}

const updateCompany = `-- name: UpdateCompany :one
UPDATE companies
SET name     = $2,
    industry = $3,
    location = $4
WHERE id = $1
RETURNING id, name, industry, location
`

type UpdateCompanyParams struct {
	ID       int32  `json:"id"`
	Name     string `json:"name"`
	Industry string `json:"industry"`
	Location string `json:"location"`
}

func (q *Queries) UpdateCompany(ctx context.Context, arg UpdateCompanyParams) (Company, error) {
	row := q.db.QueryRowContext(ctx, updateCompany,
		arg.ID,
		arg.Name,
		arg.Industry,
		arg.Location,
	)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Industry,
		&i.Location,
	)
	return i, err
}
