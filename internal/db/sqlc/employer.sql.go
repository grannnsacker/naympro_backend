// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: employer.sql

package db

import (
	"context"
)

const createEmployer = `-- name: CreateEmployer :one
INSERT INTO employers (company_id, full_name, email, hashed_password)
VALUES ($1, $2, $3, $4)
RETURNING id, company_id, full_name, email, hashed_password, created_at, is_email_verified
`

type CreateEmployerParams struct {
	CompanyID      int32  `json:"company_id"`
	FullName       string `json:"full_name"`
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) CreateEmployer(ctx context.Context, arg CreateEmployerParams) (Employer, error) {
	row := q.db.QueryRowContext(ctx, createEmployer,
		arg.CompanyID,
		arg.FullName,
		arg.Email,
		arg.HashedPassword,
	)
	var i Employer
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.FullName,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.IsEmailVerified,
	)
	return i, err
}

const deleteEmployer = `-- name: DeleteEmployer :exec
DELETE
FROM employers
WHERE id = $1
`

func (q *Queries) DeleteEmployer(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteEmployer, id)
	return err
}

const getEmployerAndCompanyDetails = `-- name: GetEmployerAndCompanyDetails :one
SELECT c.name      AS company_name,
       c.industry  AS company_industry,
       c.location  AS company_location,
       c.id        AS company_id,
       e.id        AS employer_id,
       e.full_name AS employer_full_name,
       e.email     AS employer_email
FROM employers e
         JOIN companies c ON c.id = e.company_id
WHERE e.email = $1
`

type GetEmployerAndCompanyDetailsRow struct {
	CompanyName      string `json:"company_name"`
	CompanyIndustry  string `json:"company_industry"`
	CompanyLocation  string `json:"company_location"`
	CompanyID        int32  `json:"company_id"`
	EmployerID       int32  `json:"employer_id"`
	EmployerFullName string `json:"employer_full_name"`
	EmployerEmail    string `json:"employer_email"`
}

func (q *Queries) GetEmployerAndCompanyDetails(ctx context.Context, email string) (GetEmployerAndCompanyDetailsRow, error) {
	row := q.db.QueryRowContext(ctx, getEmployerAndCompanyDetails, email)
	var i GetEmployerAndCompanyDetailsRow
	err := row.Scan(
		&i.CompanyName,
		&i.CompanyIndustry,
		&i.CompanyLocation,
		&i.CompanyID,
		&i.EmployerID,
		&i.EmployerFullName,
		&i.EmployerEmail,
	)
	return i, err
}

const getEmployerByEmail = `-- name: GetEmployerByEmail :one
SELECT id, company_id, full_name, email, hashed_password, created_at, is_email_verified
FROM employers
WHERE email = $1
`

func (q *Queries) GetEmployerByEmail(ctx context.Context, email string) (Employer, error) {
	row := q.db.QueryRowContext(ctx, getEmployerByEmail, email)
	var i Employer
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.FullName,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.IsEmailVerified,
	)
	return i, err
}

const getEmployerByID = `-- name: GetEmployerByID :one
SELECT id, company_id, full_name, email, hashed_password, created_at, is_email_verified
FROM employers
WHERE id = $1
`

func (q *Queries) GetEmployerByID(ctx context.Context, id int32) (Employer, error) {
	row := q.db.QueryRowContext(ctx, getEmployerByID, id)
	var i Employer
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.FullName,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.IsEmailVerified,
	)
	return i, err
}

const updateEmployer = `-- name: UpdateEmployer :one
UPDATE employers
SET company_id = $2,
    full_name  = $3,
    email      = $4
WHERE id = $1
RETURNING id, company_id, full_name, email, hashed_password, created_at, is_email_verified
`

type UpdateEmployerParams struct {
	ID        int32  `json:"id"`
	CompanyID int32  `json:"company_id"`
	FullName  string `json:"full_name"`
	Email     string `json:"email"`
}

func (q *Queries) UpdateEmployer(ctx context.Context, arg UpdateEmployerParams) (Employer, error) {
	row := q.db.QueryRowContext(ctx, updateEmployer,
		arg.ID,
		arg.CompanyID,
		arg.FullName,
		arg.Email,
	)
	var i Employer
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.FullName,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.IsEmailVerified,
	)
	return i, err
}

const updateEmployerPassword = `-- name: UpdateEmployerPassword :exec
UPDATE employers
SET hashed_password = $2
WHERE id = $1
`

type UpdateEmployerPasswordParams struct {
	ID             int32  `json:"id"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) UpdateEmployerPassword(ctx context.Context, arg UpdateEmployerPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateEmployerPassword, arg.ID, arg.HashedPassword)
	return err
}

const verifyEmployerEmail = `-- name: VerifyEmployerEmail :one
UPDATE employers
SET is_email_verified = TRUE
WHERE email = $1
RETURNING id, company_id, full_name, email, hashed_password, created_at, is_email_verified
`

func (q *Queries) VerifyEmployerEmail(ctx context.Context, email string) (Employer, error) {
	row := q.db.QueryRowContext(ctx, verifyEmployerEmail, email)
	var i Employer
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.FullName,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.IsEmailVerified,
	)
	return i, err
}
